{
  "type": "SavedSearchWithScheduleSyncDefinition",
  "name": "${aou_env} / ${egress_threshold_mib}-Mib / ${egress_window_sec}-min egress event",

  "search": {
    "queryText": "// This query analyses a set of Google VPC flow logs for high-egress events.\n// The incoming set of flow logs are bucketed into non-overlapping time slices\n// and grouped by project / VM name to identify VMs with high amounts of egress\n// in a given period of time.\n//\n// We currently manually publish the below query into SumoLogic. It's feasible\n// to automate this, but we haven't invested the effort yet.\n//\n// All SumoLogic saved searches are collected in the \"AoU RW Egress Alerts\" folder\n// located at https://service.us2.sumologic.com/ui/#/library/folder/10810149.\n// There should be one saved search for each {environment, window width} tuple.\n//\n// Unfortunately, not all parameters involved in a saved search can be specified in\n// this query file. There are a number of parameters which must be entered via the\n// \"Edit search\" dialog in order to properly configure each search.\n//\n// Note: the \"time range\" parameter is set to be double the window_in_seconds duration,\n// causing the search to query across multiple windows' worth of log messages. This may\n// result in duplicate high-egress event notifications being sent, but it may also increase\n// resiliency to delays or outages in SumoLogic's execution of saved searches.\n\n// Each environment should be set up with the following searches. The test environment\n// is shown as an example.\n//\n// - 3 minutes, 100Mib\n//   - Parameters: environment=test, window_in_seconds=180, egress_threshold_in_mib=100\n//   - Time range: -6m (\"use receipt time\" is checked)\n//   - Search schedule:\n//     - Run frequency: real time\n//     - Time range for scheduled search: -6m\n//\n// - 10 minutes, 150 Mib\n//   - Parameters: environment=test, window_in_seconds=600, egress_threshold_in_mib=150\n//   - Time range: -20m (\"use receipt time\" is checked)\n//   - Search schedule:\n//     - Run frequency: Every 15 minutes\n//     - Time range for scheduled search: -20m\n//\n// - 60 minutes, 200 Mib\n//   - Parameters: environment=test, window_in_seconds=3600, egress_threshold_in_mib=200\n//   - Time range: -120m (\"use receipt time\" is checked)\n//   - Search schedule:\n//     - Run frequency: Hourly\n//     - Time range for scheduled search: -120m\n\n_sourceCategory = gcp/vpcflowlogs/aou/{{environment}} logName resource timestamp\n\n// Parse the common JSON objects we'll use below\n| json \"message.data.jsonPayload\" as payload\n| json \"message.data.resource\" as resource\n\n//\n// Filter down to the set of logs we are analyzing.\n//\n\n// Filter on VPC flow logs, in case some other log type ends up here unexpectedly.\n| parse regex \"\\\"logName\\\":\\\"(?<log_name>[^\\\"]+)\\\"\"\n| where log_name matches \"projects/*/logs/compute.googleapis.com%2Fvpc_flows\"\n\n// Show only logs related to GCE subnet activity.\n| json field=resource \"type\" as type\n| where type = \"gce_subnetwork\"\n\n// Show only logs in the egress direction\n| json field=payload \"reporter\" as reporter\n| where reporter matches \"SRC\"\n\n// Exclude traffic whose destination IP is within the static IP range for Private Google Access.\n// This ensures that most Google API traffic is excluded from being considered for high-egress\n// alerts. See ticket RW-4738 for more details and breadcrumbs.\n| json field = payload \"connection.dest_ip\" as dest_ip\n| where !(dest_ip in (\n  \"199.36.153.4\",\n  \"199.36.153.5\",\n  \"199.36.153.6\",\n  \"199.36.153.7\"))\n\n// Extract some output fields from the log JSON.\n| json field=resource \"labels.project_id\" as project_name\n| json field=payload \"bytes_sent\", \"start_time\", \"end_time\" as bytes_sent, start_time, end_time\n// \"nodrop\" means it's OK if vm_name does not exist\n| json field=payload \"src_instance.vm_name\" as vm_name nodrop\n\n// There are 3 types of expected VM names:\n// 1. GCE VMs: all-of-us-<user_id>\n// 2. Dataproc master nodes: all-of-us-<user_id>-m\n// 3. Dataproc worker nodes: all-of-us-<user_id>-w-<index>\n//\n// All three of these should contribute towards a single user's egress. In the\n// event that the VM naming convention changes, egress will instead be accumulated\n// at the project level, which should only be noisier than this\n| parse regex field=vm_name \"^(?<vm_prefix>all-of-us-\\d+)(?:$|-[mw].*)\" nodrop\n\n| if (vm_name matches /^all-of-us-\\d+$/, bytes_sent, 0) as gce_bytes_sent\n| if (vm_name matches /^all-of-us-\\d+-m$/, bytes_sent, 0) as dataproc_master_bytes_sent\n| if (vm_name matches /^all-of-us-\\d+-w-\\d+$/, bytes_sent, 0) as dataproc_worker_bytes_sent\n\n// Timeslice creates a _timeslice variable, which is the message's timestamp\n// rounded to the nearest timeslice window start. We'll use this to aggregate\n// and calculate per-window egress.\n| timeslice {{window_in_seconds}}s\n\n// Breakdown by window, project, and VM prefix\n| sum(bytes_sent) as bytes_sent,\n  sum(gce_bytes_sent) as gce_bytes_sent,\n  sum(dataproc_master_bytes_sent) as dataproc_master_bytes_sent,\n  sum(dataproc_worker_bytes_sent) as dataproc_worker_bytes_sent\n  by _timeslice, project_name, vm_prefix\n\n// Collect all fields for display\n| bytes_sent / 1Mi as egress_mib\n| gce_bytes_sent / 1Mi as gce_egress_mib\n| dataproc_master_bytes_sent / 1Mi as dataproc_master_egress_mib\n| dataproc_worker_bytes_sent / 1Mi as dataproc_worker_egress_mib\n| toLong(_timeslice) as time_window_start\n| \"{{environment}}\" as environment\n| \"{{window_in_seconds}}\" as time_window_duration\n| \"{{egress_threshold_in_mib}}\" as egress_mib_threshold\n| fields\n  environment,\n  time_window_duration,\n  time_window_start,\n  egress_mib,\n  egress_mib_threshold,\n  project_name,\n  vm_prefix,\n  gce_egress_mib,\n  dataproc_master_egress_mib,\n  dataproc_worker_egress_mib\n\n// Only export rows passing our desired threshold\n| where egress_mib > {{egress_threshold_in_mib}}",
    "defaultTimeRange": "-120m",
    "byReceiptTime": true,
    "viewName": "",
    "viewStartTime": "1970-01-01T00:00:00Z",
    "queryParameters": [
      {
        "name": "environment",
        "label": "environment",
        "description": "",
        "dataType": "QUERY_FRAGMENT",
        "value": "${aou_env}",
        "autoComplete": {
          "autoCompleteType": "SKIP_AUTOCOMPLETE",
          "autoCompleteKey": null,
          "autoCompleteValues": [],
          "lookupFileName": null,
          "lookupLabelColumn": null,
          "lookupValueColumn": null
        }
      },
      {
        "name": "window_in_seconds",
        "label": "window_in_seconds",
        "description": "",
        "dataType": "NUMBER",
        "value": "${egress_window_sec}",
        "autoComplete": {
          "autoCompleteType": "SKIP_AUTOCOMPLETE",
          "autoCompleteKey": null,
          "autoCompleteValues": [],
          "lookupFileName": null,
          "lookupLabelColumn": null,
          "lookupValueColumn": null
        }
      },
      {
        "name": "egress_threshold_in_mib",
        "label": "egress_threshold_in_mib",
        "description": "",
        "dataType": "NUMBER",
        "value": "${egress_threshold_mib}",
        "autoComplete": {
          "autoCompleteType": "SKIP_AUTOCOMPLETE",
          "autoCompleteKey": null,
          "autoCompleteValues": [],
          "lookupFileName": null,
          "lookupLabelColumn": null,
          "lookupValueColumn": null
        }
      }
    ],
    "parsingMode": "Manual"
  },
  "searchSchedule": {
    "cronExpression": "0 0 * * * ? *",
    "displayableTimeRange": "-120m",
    "parseableTimeRange": {
      "type": "BeginBoundedTimeRange",
      "from": {
        "type": "RelativeTimeRangeBoundary",
        "relativeTime": "-2h"
      },
      "to": null
    },
    "timeZone": "America/Chicago",
    "threshold": {
      "thresholdType": "group",
      "operator": "gt",
      "count": 0
    },
    "notification": {
      "taskType": "WebhookSearchNotificationSyncDefinition",
      "webhookId": "0000000000014FB4",
      "payload": null,
      "itemizeAlerts": false,
      "maxItemizedAlerts": 50
    },
    "scheduleType": "1Hour",
    "muteErrorEmails": false,
    "parameters": [
      {
        "name": "environment",
        "value": "${aou_env}"
      },
      {
        "name": "window_in_seconds",
        "value": "${egress_window_sec}"
      },
      {
        "name": "egress_threshold_in_mib",
        "value": "${egress_threshold_mib}"
      }
    ]
  },
  "description": ""
}
